// Code generated by protoc-gen-go. DO NOT EDIT.
// source: paxos.proto

/*
Package protos is a generated protocol buffer package.

*
the scene is from lamport-paxos, The single-Decree Synod
and I change some details.
see more http://lamport.azurewebsites.net/pubs/lamport-paxos.pdf

It is generated from these files:
	paxos.proto

It has these top-level messages:
	NextBallot
	LastVote
	BeginBallot
	Voted
	Success
	Leger
	Empty
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NextBallot struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *NextBallot) Reset()                    { *m = NextBallot{} }
func (m *NextBallot) String() string            { return proto.CompactTextString(m) }
func (*NextBallot) ProtoMessage()               {}
func (*NextBallot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NextBallot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LastVote struct {
	Id    uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	MinId uint32 `protobuf:"varint,2,opt,name=minId" json:"minId,omitempty"`
}

func (m *LastVote) Reset()                    { *m = LastVote{} }
func (m *LastVote) String() string            { return proto.CompactTextString(m) }
func (*LastVote) ProtoMessage()               {}
func (*LastVote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LastVote) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LastVote) GetMinId() uint32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

type BeginBallot struct {
	Id     uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Decree string `protobuf:"bytes,2,opt,name=decree" json:"decree,omitempty"`
}

func (m *BeginBallot) Reset()                    { *m = BeginBallot{} }
func (m *BeginBallot) String() string            { return proto.CompactTextString(m) }
func (*BeginBallot) ProtoMessage()               {}
func (*BeginBallot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BeginBallot) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BeginBallot) GetDecree() string {
	if m != nil {
		return m.Decree
	}
	return ""
}

type Voted struct {
	Vote   bool   `protobuf:"varint,1,opt,name=vote" json:"vote,omitempty"`
	Id     uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	Priest string `protobuf:"bytes,3,opt,name=priest" json:"priest,omitempty"`
}

func (m *Voted) Reset()                    { *m = Voted{} }
func (m *Voted) String() string            { return proto.CompactTextString(m) }
func (*Voted) ProtoMessage()               {}
func (*Voted) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Voted) GetVote() bool {
	if m != nil {
		return m.Vote
	}
	return false
}

func (m *Voted) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Voted) GetPriest() string {
	if m != nil {
		return m.Priest
	}
	return ""
}

type Success struct {
	Decree string `protobuf:"bytes,1,opt,name=decree" json:"decree,omitempty"`
}

func (m *Success) Reset()                    { *m = Success{} }
func (m *Success) String() string            { return proto.CompactTextString(m) }
func (*Success) ProtoMessage()               {}
func (*Success) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Success) GetDecree() string {
	if m != nil {
		return m.Decree
	}
	return ""
}

type Leger struct {
	Values map[uint32]string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Leger) Reset()                    { *m = Leger{} }
func (m *Leger) String() string            { return proto.CompactTextString(m) }
func (*Leger) ProtoMessage()               {}
func (*Leger) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Leger) GetValues() map[uint32]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*NextBallot)(nil), "protos.NextBallot")
	proto.RegisterType((*LastVote)(nil), "protos.LastVote")
	proto.RegisterType((*BeginBallot)(nil), "protos.BeginBallot")
	proto.RegisterType((*Voted)(nil), "protos.Voted")
	proto.RegisterType((*Success)(nil), "protos.Success")
	proto.RegisterType((*Leger)(nil), "protos.Leger")
	proto.RegisterType((*Empty)(nil), "protos.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Paxos service

type PaxosClient interface {
	DealPreBallot(ctx context.Context, in *NextBallot, opts ...grpc.CallOption) (*LastVote, error)
	DealBallot(ctx context.Context, in *BeginBallot, opts ...grpc.CallOption) (*Voted, error)
	RecordDecree(ctx context.Context, in *Success, opts ...grpc.CallOption) (*Empty, error)
	Synchronize(ctx context.Context, in *Leger, opts ...grpc.CallOption) (*Leger, error)
}

type paxosClient struct {
	cc *grpc.ClientConn
}

func NewPaxosClient(cc *grpc.ClientConn) PaxosClient {
	return &paxosClient{cc}
}

func (c *paxosClient) DealPreBallot(ctx context.Context, in *NextBallot, opts ...grpc.CallOption) (*LastVote, error) {
	out := new(LastVote)
	err := grpc.Invoke(ctx, "/protos.Paxos/DealPreBallot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) DealBallot(ctx context.Context, in *BeginBallot, opts ...grpc.CallOption) (*Voted, error) {
	out := new(Voted)
	err := grpc.Invoke(ctx, "/protos.Paxos/DealBallot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) RecordDecree(ctx context.Context, in *Success, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protos.Paxos/RecordDecree", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paxosClient) Synchronize(ctx context.Context, in *Leger, opts ...grpc.CallOption) (*Leger, error) {
	out := new(Leger)
	err := grpc.Invoke(ctx, "/protos.Paxos/Synchronize", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Paxos service

type PaxosServer interface {
	DealPreBallot(context.Context, *NextBallot) (*LastVote, error)
	DealBallot(context.Context, *BeginBallot) (*Voted, error)
	RecordDecree(context.Context, *Success) (*Empty, error)
	Synchronize(context.Context, *Leger) (*Leger, error)
}

func RegisterPaxosServer(s *grpc.Server, srv PaxosServer) {
	s.RegisterService(&_Paxos_serviceDesc, srv)
}

func _Paxos_DealPreBallot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextBallot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).DealPreBallot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Paxos/DealPreBallot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).DealPreBallot(ctx, req.(*NextBallot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_DealBallot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginBallot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).DealBallot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Paxos/DealBallot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).DealBallot(ctx, req.(*BeginBallot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_RecordDecree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Success)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).RecordDecree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Paxos/RecordDecree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).RecordDecree(ctx, req.(*Success))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paxos_Synchronize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Leger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaxosServer).Synchronize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Paxos/Synchronize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaxosServer).Synchronize(ctx, req.(*Leger))
	}
	return interceptor(ctx, in, info, handler)
}

var _Paxos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Paxos",
	HandlerType: (*PaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DealPreBallot",
			Handler:    _Paxos_DealPreBallot_Handler,
		},
		{
			MethodName: "DealBallot",
			Handler:    _Paxos_DealBallot_Handler,
		},
		{
			MethodName: "RecordDecree",
			Handler:    _Paxos_RecordDecree_Handler,
		},
		{
			MethodName: "Synchronize",
			Handler:    _Paxos_Synchronize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paxos.proto",
}

func init() { proto.RegisterFile("paxos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcf, 0x6f, 0xaa, 0x40,
	0x10, 0x06, 0x7c, 0xa8, 0x6f, 0x78, 0xbc, 0x67, 0xf6, 0x35, 0x0d, 0x25, 0x3d, 0xd8, 0x3d, 0x79,
	0xa9, 0xb1, 0x36, 0x4d, 0x7f, 0x1c, 0xad, 0x1e, 0x9a, 0x98, 0xc6, 0x60, 0xe2, 0x9d, 0xc2, 0xc4,
	0x92, 0x22, 0x4b, 0x76, 0x57, 0x23, 0xfd, 0x3f, 0xfb, 0xff, 0x34, 0x2c, 0x4b, 0xc5, 0xa6, 0x27,
	0xf6, 0x9b, 0x99, 0xef, 0x9b, 0x99, 0x6f, 0x00, 0x27, 0x0f, 0xf7, 0x4c, 0x0c, 0x73, 0xce, 0x24,
	0x23, 0x6d, 0xf5, 0x11, 0xf4, 0x1c, 0xe0, 0x19, 0xf7, 0x72, 0x12, 0xa6, 0x29, 0x93, 0xe4, 0x2f,
	0x58, 0x49, 0xec, 0x99, 0x7d, 0x73, 0xe0, 0x06, 0x56, 0x12, 0xd3, 0x11, 0x74, 0xe7, 0xa1, 0x90,
	0x2b, 0x26, 0xf1, 0x7b, 0x8e, 0x9c, 0x80, 0xbd, 0x49, 0xb2, 0xa7, 0xd8, 0xb3, 0x54, 0xa8, 0x02,
	0xf4, 0x06, 0x9c, 0x09, 0xae, 0x93, 0xec, 0x67, 0x41, 0x72, 0x0a, 0xed, 0x18, 0x23, 0x8e, 0xa8,
	0x58, 0xbf, 0x03, 0x8d, 0xe8, 0x23, 0xd8, 0x65, 0x93, 0x98, 0x10, 0xf8, 0xb5, 0x63, 0x12, 0x15,
	0xa5, 0x1b, 0xa8, 0xb7, 0x16, 0xb1, 0x9a, 0x22, 0x39, 0x4f, 0x50, 0x48, 0xaf, 0x55, 0x89, 0x54,
	0x88, 0x5e, 0x40, 0x67, 0xb9, 0x8d, 0x22, 0x14, 0xa2, 0xd1, 0xc7, 0x3c, 0xea, 0xb3, 0x05, 0x7b,
	0x8e, 0x6b, 0xe4, 0xe4, 0x0a, 0xda, 0xbb, 0x30, 0xdd, 0xa2, 0xf0, 0xcc, 0x7e, 0x6b, 0xe0, 0x8c,
	0xcf, 0x2a, 0x5f, 0xc4, 0x50, 0xa5, 0x87, 0x2b, 0x95, 0x9b, 0x65, 0x92, 0x17, 0x81, 0x2e, 0xf4,
	0xef, 0xc1, 0x69, 0x84, 0x49, 0x0f, 0x5a, 0x6f, 0x58, 0xe8, 0xdd, 0xca, 0x67, 0xe9, 0x88, 0x2a,
	0xd5, 0xbb, 0x55, 0xe0, 0xc1, 0xba, 0x33, 0x69, 0x07, 0xec, 0xd9, 0x26, 0x97, 0xc5, 0xf8, 0xc3,
	0x04, 0x7b, 0x51, 0x9e, 0x81, 0xdc, 0x82, 0x3b, 0xc5, 0x30, 0x5d, 0x70, 0xd4, 0x56, 0x91, 0x7a,
	0x82, 0xc3, 0x3d, 0xfc, 0xde, 0xd7, 0x54, 0xfa, 0x0a, 0xd4, 0x20, 0x63, 0x80, 0x92, 0xa8, 0x59,
	0xff, 0xeb, 0x8a, 0x86, 0xeb, 0xbe, 0x5b, 0x07, 0x95, 0xa7, 0xd4, 0x20, 0x23, 0xf8, 0x13, 0x60,
	0xc4, 0x78, 0x3c, 0x55, 0x36, 0x90, 0x7f, 0x75, 0x81, 0xf6, 0xeb, 0xc0, 0x50, 0x63, 0x52, 0x83,
	0x5c, 0x82, 0xb3, 0x2c, 0xb2, 0xe8, 0x95, 0xb3, 0x2c, 0x79, 0x47, 0xe2, 0x1e, 0xd9, 0xe3, 0x1f,
	0x43, 0x6a, 0xbc, 0x54, 0xbf, 0xd3, 0xf5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0xa4, 0xca,
	0xde, 0x64, 0x02, 0x00, 0x00,
}
